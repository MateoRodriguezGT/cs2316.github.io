#+TITLE: PyQT GUIs
#+AUTHOR:
#+EMAIL:
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: H:2 toc:nil num:t
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+LaTeX_HEADER: \usepackage{verbatim, multicol, tabularx,color}
#+LaTeX_HEADER: \usepackage{amsmath,amsthm, amssymb, latexsym, listings, qtree}
#+LaTeX_HEADER: \lstset{frame=tb, aboveskip=1mm, belowskip=0mm, showstringspaces=false, columns=flexible, basicstyle={\scriptsize\ttfamily}, numbers=left, frame=single, breaklines=true, breakatwhitespace=true, keywordstyle=\bf}
#+LaTeX_HEADER: \setbeamertemplate{footline}[frame number]
#+LaTeX_HEADER: \hypersetup{colorlinks=true,urlcolor=blue}

* PyQt GUIs

** Python GUIs

- Python wasn't originally desined for GUI programming
- In the interest of "including batteries" the ~tkinter~ was included in the Python standard library

    - ~tkinter~ is a Python wrapper around the Tcl/Tk GUI toolkit
    - Tk must be installed on your system (included in most Unixes, additional install on Mac and Windows)
    - Tk is old and weak

- Many other GUI libraries were created for Python. wxPython, PyGTK, and PyQt/PySide the most popular

- PyQt/PySide was once difficult to install because Qt was difficult to install, but the Anaconda folks fixed that.

- So we'll use PyQt, PyQt5 to be precise. Install with:

#+BEGIN_SRC python
$ conda install pyqt
#+END_SRC

** PyQt

- Qt is a C++ library originally created by Norwegian company Troll Tech.

- Qt has always enjoyed a reputation as a well-designed and powerful GUI framework.

- The KDE project chose to base their popular KDE (K Desktop Environment) graphical shell for Linux.

- Like most modern GUI frameworks, Qt (and PyQt) makes heavy use of objects.

** Hello, PyQt

#+BEGIN_SRC python
import sys
from PyQt5.QtWidgets import QApplication, QWidget

app = QApplication(sys.argv)

w = QWidget()
w.setWindowTitle('Hello PyQt!')
w.show()
return_code = app.exec_()
sys.exit(return_code)
#+END_SRC

Online: [[../code/gui/helloqt.py][helloqt.py]]

** Basic PyQt App Outline

1. Create a ~QApplication~ object
2. Create a main application window (~QWidget~ object)
3. Set paramters of the main window, create and add child widgets, etc.
4. Show main application window
5. Start the app (~app.exec_()~)

** Basic Qt Application Elements

#+BEGIN_SRC python
import sys
from PyQt5.QtWidgets import QApplication, QWidget

app = QApplication(sys.argv)

w = QWidget()
w.setWindowTitle('Hello PyQt!')
w.show()
return_code = app.exec_()
sys.exit(return_code)
#+END_SRC

** Examples

- [[../code/gui/helloqt.py][helloqt.py]]
- [[../code/gui/label.py][label.py]]
- [[../code/gui/button.py][button.py]]
- [[../code/gui/counter.py][counter.py]]
